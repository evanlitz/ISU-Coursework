Commands:
Open a terminal in WSL Ubuntu first.
Then run gcc -o dungeon dungeon.c -Wall -Werror -lncurses, and then ./dungeon
- Note that for some reason, the ubuntu terminal makes me trash the terminal every time I test it. I have no clue as to why.

I began this assignment by removing the random player movement by commenting it all out, in both its function and the main function.
Then I imported the ncurses library and created a numMonsters constant that the player can set to change the amount of monsters in the game. 
drawDungeonMap function printed out the dungeon in the ubuntu terminal using the ncurses library and its move function to iterate and print the dungeonMap.
Through getch(), I pause the terminal/game and take player input for their desired movement. I checked the player input for movement according to the assignment's requirements. Also, there is a playerActed boolean that checks if a player has attempted movement for their turn.
Then movePlayer is called with the according movement corresponding to the player's chosen movement.
movePlayer is responsible for the execution of moving the player to their chosen position. The difference in calls based on input is differenitated through the my and mx parameters: for example, if a player moves to the right, the my = 0 and the mx = 1.
It also takes in player position, monsters array with numMonsters, the pcLastTile, and hardness/map arrays. 
It then applies the player movement to the player position and checks the new position for being out of bounds, returning nothing if it is.
Then it checks if the new position has a monster on it. If it does, then the monster array is iterated through and finds a monster that is killed through setting its alive to false, the position to a '.', it displays a monster killed at x,y message, and the game has a tiny delay to recalibrate.
Then it checks the hardness of the new position for a valid value of 0, which means it is not a wall. If it is 0, then the player's old position passed to the function is set to the pcLastTile which is also updated to the player's new position after. Then, the playerX and playerY address are updated and the char in the dungeonMap is set to the '@' player symbol.
I also added a check in moveMonster that checks its aliveness, whcih decreases memory usage and unnessecary monster turns.
If the player types in an 'm', then the printMonsters function will be called to display the monster list.
The printMonsters function uses the aliveCount, scroll, and ch variables to help dictate player input and interface in the function.
The aliveCount is used to track how many alive monsters there currently are to dictate scrolling boundaries.
The scroll variable tracks how up or down scrolled the player currently is and what monsters to print on the screen.
The ch variable tracks what character the player inputs, which is either the up/down arrow to scroll or ESC to quit and re-enter the dungeon.
Integeres line and displayed also track what monsters to display and what line the user is currently scrolling on.
The function has an infinite while loop that only exits when the user enters the escape button to leave the monster list.
The monsters array is iterated through, checked for aliveness (with aliveMonsters updated accordingly), and also checked if it should be displayed if the current display value is less than the scroll value. 
Then the monster distance to player is calculated and displayed using the subtraction with playerX and playerY. The direction is checked by observing positivity and negativity or zeroness. 
These calculated values are printed with the corresponding monster and its symbol, and the user is able to scroll through them viewing 22 at a time.
Finally, if a '<' or '>' character is encountered and the user inputs its character, then it will generate a new dungeon that the staircase takes the user to. NOTE THAT I DO NOT HAVE REMEMBERED DUNGEONS, JUST NEW DUNGEONS ARE GENERATED EACH TIME.
Taking the staircase will regenerate the entire dungeon by calling all of the necesscary functions, while also resetting the priority queue by setting the first turn to the player and calculating the monster turns using their speed and monster array iteration.
The playerActed boolean is set to true when any input is entered.
If the player inputs 'Q', then endwin and exit(0) are called to signal the end of the game.
Finally if playerActed was set to true, then the distance maps for the monsters are recalibrated by calling the functions. Also, the playerTurn is pushed into the priority queue using a speed of 10.


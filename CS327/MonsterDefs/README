@author Evan Litzer
4/9/2025
MonsterDefs

Commands:
make (for normal dungeon)
make itemparser (for item parser)
make monsterparser (for monster parser)

./monsterparser
./itemparser

Prints monster information and item information into the terminal.

Currently the directory is set to the .rlg folder of either the home or userprofile directory of computer based on operating system.
The filenames for the path are set to monster_desc.txt and object_desc.txt respectively.

The one thing I am worried about grading is that you will not be able to open the files. 
Please check my code and note that I have the correct wiring. I am confused as to how WSL affects this pathing, which I solved through copying and pasting my .rlg folder and its files into the WSL folder. 
If worst comes to worst, I have commented out the pathing for a local directory to be created and the rlg folder to be used locally. 
I have tested the code on the example files in Piazza.

Dice.h:
The dice class I implemeted has three public variables, integers base, dice, and sides. The diceroll is represented through these three numbers, as the base is what you atuomatically add (min), 
the dice is how many dice are rolled, and the sides are how many sides are on each of the dice. The dice constructor sets all three to 0, but obviously I will set them to the right dice numbers later on.
The parse function takes in the string as input and the address of the outDice, which is the dice object that is affected by the inputted strings.
If the scanned string input is in correct format (3 integers), then the base, dice, and sides of the outDice object are set and the parse function returns true. Otherwise it should return false. 

MonsterAttributes.h:
The MonsterAttributes class is responsble for defining the variables and classifications of a monster as inputted by the monster txt file and outlined by the assignment. 
The variables mirror the inputted types of the monster attributes, along with three dice for speed, hp, and damage. I also have a rarity integer, but I have not done anything with that just yet.
Currently the class just has one method, the print() void function acting almost like a toString for the monster attributes. 
It just outputs all of the monster attributes in a nice and readable way in the terminal. Later it will have more functions.

ItemAttributes.h:
The ItemAttribute class is responsible for defining variables and characteristics of an item as inputted by the item text file and outlined by the assignment requirements. 
The variables mirror the different types of classifications stated in the text file and by the project. There is also dices for the weight, hit, damage, dodge, defense, speed vars that will later be implemented (maybe)? 
I also have an int for rarity, an isComplete boolean to check if the item  has been created, and a boolean artifact to check if the attribute for the item has already been added.
The ItemAttributes print function acts a toString for the ItemAttributes, as it just formats the item attribute information into a readable way into the terminal. 

MonsterParser.cpp:
The MonsterParser file parses the text file that is inserted into the rlg327 home directory and extracts the necesscary information for each monster that is included in the text. 
The file first checks if the file exists, then if the first line states "RLG327 MONSTER DESCRIPTION 1," and then begins the monster input iteration loop. 
In this iteration loop, the current line is checked for "BEGIN MONSTER" after being trimmed down. I have a trim function that cleans up the lines before working with them. I know it is available in a package somewhere, but I decided to implement it myself. 
If a "BEGIN MONSTER" line is found, then a MonsterAttributes object m is created. Then the parseMonster function is called with the file and m as input.
parseMonster is a boolean function that returns true if the monster has valid input from the text file and can therefore be converted into a monster, and false if there are any apparent errors in the text file for said monster.
It iterates through each line of the monster text. It checks for "END" and breaks the loop if the monster is done being inputted. 
It then checks if the current line is part of the monster description, which is signaled through a monsterDesc boolean variable. If it is, it keeps adding to the description.
If not, then it checks for duplicate attributes by comparing the first word of the line to the seenFields of the monster. 
This makes sure no duplicate fields are implemented, and if they do exist, then the function immediately returns false. If the keyword has not been observed yet, then it is added to the seenFields string array. 
Then the keyword is checked for each attribute and that attribute of the monsterParser object m is then set to the pulled value out of the text file. 
The dice values are checked for bounds, along with the rarity. If at any point the text portion for the monster does not strictly meet the input rules, then the function returns false.
If the monsterAttribute object is valid and the parseMonster function returns true, then the monster attribute item is added to the monsters array. 
Finally all of the monsters are printed with the print() function.

ItemParser.cpp:
ItemParser operates very similarily to MonsterParser except it is tailored towards items. 
It's pretty much the same format with different variables and less restrictions due to items not being fully implemented into our project yet. 
I copy and pasted most of my code from MonsterParser and just tailored it off of its format.



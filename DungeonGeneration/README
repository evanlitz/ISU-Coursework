The dungeon.c file is currently responsible for generating the dungeon map and printing it into the terminal based on the requirements laid out in the assignment.
It first include the necesscary libraries and defines variables including min and max rooms, min and max room length and height, and min and max up/down staircases.
Rooms are created with structs, with attributes int x/y positions and height/width that are all randomly generated later on. A room array is created with size MAX_ROOMS.
The dungeon representation is structured through a 21 by 80 character array that is initialized with all rock. 
The characters are represented as follows: ' ' = rock, '#' = corridor, and '.' = room. 
CreateRooms method is then called passing in the dungeon character array. Total rooms is randomized within bounds and then is used to iterate creation. 
Rooms are assigned a random width, height, x/y position and is then checked for any invalid placement including room overlapping and bordering. Oncd that has been checked, the room is created and assigned in the room array with the iteration variable. The room is then created in the character array with '.' and then the next room is initialized.
createRooms returns the amount of rooms, labeled totalRooms.
createUpStaircases and createDownStaircases are two methods I likely could have merged into one. They are responsible for randomly setting the up and down staircases placed randomly in the rooms. 
upStairs is indicated by '<' and downStairs is indicated by '>'
Both methods return the amount of up/down staircases.
calculatePath is then called, which initializes an array of booleans expressing if rooms are connected. 
The room center is found through the getRoomCenter, which gets the center of the room passed in, assigned to the addresses of room1X and room1Y. 
The rooms are then interated through, with the center helper method getting the compared room's center.
Then the pathDistanceCalculator is called, which implements the Euclidean distance calculator to show the distance between the two rooms.
Once the mininum distance to a room is found after complete iteration, nearestRoom is assigned and generatePath is called, aloing with isConnected[a] being set to true.
The center of the room is then used to generate a random offset that will make the paths more random and less straight.
In generatePath, the characters are laid out correctly based on current positions. 
X and Y are adjusted based on the center of the target room. I am still working on randomizing the path, and will make certain adjustments. 
Checks are made to ensure no path interferes with a room.
All rooms are ensured to be connected through calculatePath.
Finally, printDungeonMap is called that prints the character array into the terminal.

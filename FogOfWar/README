Commands:
make
./dungeon (--nummon #)

Classes:
Character.h:
The base class for any sort of character that populates and roams the dungeon. Includes int variables position x and y, int speed, char symbol, and bool alive.
Then the default constructor for the character is set with x and y = 0, speed = 10, symbol = ?.
I have left a void move function in the class if I will need one later, but for now that is it.

Constants.h:
This class stores some but not all crucial dungeon constants. This includes the dungeon width and height, the max and min rooms with their max and min x/y sizes, 
the up and down volatility of the path, and the maxTurns currently set at 10000 for the game limit.

DownStairCase.h & UpStairCase.h:
These are the up and down staircases that only store their position. Yes I know, I should have an abstraction for staircase or combine it, but with how simple it is,
I did not deem it necesscary.

Event.h:
These are the turns in the priority queue. The variables include an int turnTime, a boolean isPC, and an int index.
The default event has time = 0, bool pc = false, and index set to -1.

Monster.h:
Has int type, bool tunnel, and int lastSeenX and lastSeenY. Default monster has int x, y = 0, int speed = 10, and type = 0.
I also have a void move function in here that may be used later.

PC.h:
Includes the pcLastTile, the rememberedDungeon that represents what the player has explored, and the default constructor that sets position to (0, 0) and speed to 10.
Player speed is always 10. Also has a updatePosition function that is called when moving the player.
resetMemory resets the rememberedDungeon when a new dungeon is loaded or a staircase is taken.

Point.h:
Includes x, y, and distance. I fazed this out in the dungeon file, but I am keeping it for later use if need be.

PriorityQueue:
This is the object type of the game loop, as it controls the turns. I have its max size set to 10000 as a constant, and I have the turns set as an array of events with size Max Size, with initial size set to 0.
Some functions that are implemented in the RealDungeon.cpp include the void push, Event pop, bool isEmpty, and void clear(). I also have void swap set as a private function.

Room.h:
Includes the int x and y of the room position and the width/heoght of the rooms.
Default constructor sets it all to 0.
Includes getCenter method that returns the center of the room, along with the contains method that checks if the room contains the player position.

Dungeon.h:
The big one. Includes all the other header files. The public variables include fogToggle for turning on and off the fog, teleportMode that toggles if the user is currently in the teleport mode, forceFullRender that 
forces the dungeon map to print when in teleport mode, and the teleportX and teleportY for the desired teleport location.
Also has the constants for setting the max up and down staircases and the default number of monsters, currently set to 15.
For the public methods, it includes void generate, render, runGameLoop, movePlayer, printMonsters, save/loadDungeon, isMonsterSymbol, isWalkable, moveStraightLine, and regenerateDUngeon.
Also declares functions handlePlayerInput, checkVictory, isInRoom, updateVisibility, and handleTeleportInput.
For private variables, includes the dungeonMap, hardness map, array of staircases and the number of them, the player character and their last tile, the standard vector of the monsters with the numMonsters,
the non-tunneling and tunneling distance maps, and the priority queue for running the game. 
Also declares all of the private functions as well.

RealDungeon.cpp:
The main code changes when switching from C to C++ was the ability to have class defined objects and being able to directly affect them instead of declaring arrays of structs in the file and changing them in the script.
This is really helpful, as it makes it very easy to store and change information for different types of objects.
Here's an example of this: I can use player.x and player.y instead of tracking it and passing it into every function.
For most of my functions now, I do not need to pass an insane amount of arguments in. This is very nice, but it requires me to declare most functions with Dungeon:: before them so that it can access and change the necesscary
information. 

Now for what was changed for the assignment, I added the fog feature that is turned on with the player input of 'f'. Note that this does not cost the user a turn, its just a debuff effect.
fogToggle boolean lets the dungeon know when to display the remembered map and when to display the dungeon map. This is controlled when the user presses f, as it begins on and is toggled off after the f input. 
Note that render reads the boolean is, that is it displays the full map when it is toggled off, and only displays the 7 by 7 area around the user when toggled on.
As for the rememberedMap for the user, when the user traverses around and changes their 7 by 7 area, the chars of the CURRENT dungeon are stored into the remembered map permanently until either the user accesses the area
again, the dungeon is regenerated, or the game ends. This remembered dungeon is cleared through resetMemory, which resets all of it to spaces (its default).
Now for the teleporting, the user presses g to enter the teleport mode. Note that this does not mean a turn is used, but rather as a debug tool. The teleportation map only displays the full dungeon, and automatically turns off the fog.
When the user presses the g input, it calls the handleTeleportInput method that then checks for further input on how the user wants to teleport. I have it hotwired to the g, h, j, and k keys for teleportation transport,
and also sets the forceFullRender boolean to true. Then it calls for input as according to the assignment. If g is called, then the teleport is confirmed and the user teleports to whereever the asterisk is for the teleportation,
and the player's position is updated and the tile is swapped with pcLastTile and the PC @. If the r is called, then a random spot on the map is teleported to, and the pc tile is swapped with its original.
The player position is updated through player.updatePosition and the teleport function is called out of. 
updateVisibility helps update the visibility throughout the entire process, as it checks the 7 by 7 area where the user is and adds it to the remembered dungeon.
The boolean suppressMonsterTurns helps me pause the game when the m or g input is called, so that no other turns in the pq are called after the user enters these menus.
I am running out of time to submit, but I think I have covered everything. The generate function is basically the main function altogether, calling all of the necesccary functions to regenerate a dungeon.
There is a main.cpp file that declares a dungeon d and runs its game loop to start a game and give the dungeon data.
I am out of time I hope my code makes sense.